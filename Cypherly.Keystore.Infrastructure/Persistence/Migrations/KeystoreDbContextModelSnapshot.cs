// <auto-generated />
using System;
using Cypherly.Keystore.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cypherly.Keystore.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(KeystoreDbContext))]
    partial class KeystoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cypherly.Keystore.Domain.Aggregates.KeyBundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccessKey")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("IdentityKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("SignedPreKeyPublic")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SignedPreKeySignature")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("SignedPreKeyTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SignedPrekeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccessKey")
                        .IsUnique();

                    b.ToTable("key_bundle", (string)null);
                });

            modelBuilder.Entity("Cypherly.Keystore.Domain.Entities.PreKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Consumed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KeyBundleId")
                        .HasColumnType("uuid");

                    b.Property<int>("KeyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("KeyBundleId");

                    b.ToTable("pre_key", (string)null);
                });

            modelBuilder.Entity("Cypherly.Keystore.Infrastructure.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("outbox_message", (string)null);
                });

            modelBuilder.Entity("Cypherly.Keystore.Domain.Entities.PreKey", b =>
                {
                    b.HasOne("Cypherly.Keystore.Domain.Aggregates.KeyBundle", "KeyBundle")
                        .WithMany("PreKeys")
                        .HasForeignKey("KeyBundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyBundle");
                });

            modelBuilder.Entity("Cypherly.Keystore.Domain.Aggregates.KeyBundle", b =>
                {
                    b.Navigation("PreKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
